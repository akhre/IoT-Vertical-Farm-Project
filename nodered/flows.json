[
    {
        "id": "743c2946bb229b64",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6309eb19e3926174",
        "type": "subflow",
        "name": "Insert new plant",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 300,
                "wires": [
                    {
                        "id": "88e042f48e9dc185"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2040,
                "y": 280,
                "wires": [
                    {
                        "id": "e8530e2f24b86273",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1eee5e628cd61fbb",
        "type": "subflow",
        "name": "Delete rows",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "562ca628cb84a6b6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1920,
                "y": 160,
                "wires": [
                    {
                        "id": "51ea684880bc6387",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c50d14a79c209768",
        "type": "subflow",
        "name": "Insert new plant type",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 2540,
                "y": 1200,
                "wires": [
                    {
                        "id": "6f66de74d5145e4e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "18b6589b30403c76",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1016d485d246ea42",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#56e660",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#56e660",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#56e660",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#99f09f",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#56e660",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4829267117a051ab",
        "type": "ui_group",
        "name": "Farm",
        "tab": "18b6589b30403c76",
        "order": 1,
        "disp": true,
        "width": 27,
        "collapse": false,
        "className": ""
    },
    {
        "id": "4e0d70e4f95612a8",
        "type": "ui_group",
        "name": "Add plants",
        "tab": "18b6589b30403c76",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "70bb5981ca178cf9",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#25d06f",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "074e0b95783c86fc",
        "type": "ui-page",
        "name": "Data",
        "ui": "d1834bd129d4d038",
        "path": "/data",
        "icon": "database",
        "layout": "notebook",
        "theme": "70bb5981ca178cf9",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "4fb965676ff2d0f1",
        "type": "ui-group",
        "name": "Farm data",
        "page": "074e0b95783c86fc",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "85080b6a3e8df68c",
        "type": "ui-group",
        "name": "Add a new plant to the farm",
        "page": "bc411709739d5075",
        "width": "20",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d1834bd129d4d038",
        "type": "ui-base",
        "name": "user-interface",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "showPageTitle": true,
        "navigationStyle": "default",
        "titleBarStyle": "default"
    },
    {
        "id": "014ee6f33eb57c5b",
        "type": "ui-page",
        "name": "Delete elements",
        "ui": "d1834bd129d4d038",
        "path": "/delete",
        "icon": "delete",
        "layout": "notebook",
        "theme": "70bb5981ca178cf9",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6de228b42e7e4975",
        "type": "ui-group",
        "name": "Delete items from the farm",
        "page": "014ee6f33eb57c5b",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "bc411709739d5075",
        "type": "ui-page",
        "name": "Add data",
        "ui": "d1834bd129d4d038",
        "path": "/add",
        "icon": "plus",
        "layout": "notebook",
        "theme": "70bb5981ca178cf9",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6c767b604de7526e",
        "type": "ui-page",
        "name": "Home",
        "ui": "d1834bd129d4d038",
        "path": "/home",
        "icon": "home",
        "layout": "notebook",
        "theme": "70bb5981ca178cf9",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f323f236d8565c08",
        "type": "ui-group",
        "name": "Plots",
        "page": "6c767b604de7526e",
        "width": "20",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a86564b2e33734ee",
        "type": "ui-group",
        "name": "Add new plant type",
        "page": "bc411709739d5075",
        "width": "5",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "449c33fdc710fc29",
        "type": "ui-group",
        "name": "Vegetative state ideal values",
        "page": "bc411709739d5075",
        "width": "5",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "46e90799a4604e92",
        "type": "ui-group",
        "name": "Seeding state ideal values",
        "page": "bc411709739d5075",
        "width": "5",
        "height": "1",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "6e375fabdc544e4e",
        "type": "ui-group",
        "name": "Mature state ideal values",
        "page": "bc411709739d5075",
        "width": "5",
        "height": "1",
        "order": 5,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": false
    },
    {
        "id": "81b1bdc3.9a60b8",
        "type": "ui_group",
        "name": "Hacks",
        "tab": "2f5baa7e.0221fe",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2f5baa7e.0221fe",
        "type": "ui_tab",
        "name": "Settings",
        "icon": "timeline",
        "order": 1,
        "disabled": true,
        "hidden": false
    },
    {
        "id": "0976cfd78f1aded6",
        "type": "ui-group",
        "name": "Room R1",
        "page": "6c767b604de7526e",
        "width": "10",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "5b2a8493ef893903",
        "type": "ui-group",
        "name": "Room R2",
        "page": "6c767b604de7526e",
        "width": "10",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "88e042f48e9dc185",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "extract type names",
        "func": "// Input is assumed to be in msg.payload\nconst plantTypes = msg.payload; // This should be your array of plant objects\nlet options = [];\n\n// Loop through each plant type and create an object for the dropdown\nfor (let plant of plantTypes) {\n    options.push({\n        \"label\": plant.type_name, // The name to display in the dropdown\n        \"value\": plant.type_id    // The ID to be sent when this option is selected\n    });\n}\n\n// Set the formatted options as the new payload\nmsg.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 300,
        "wires": [
            [
                "7f5e765e17cb2e94"
            ]
        ]
    },
    {
        "id": "7f5e765e17cb2e94",
        "type": "ui-dropdown",
        "z": "6309eb19e3926174",
        "group": "85080b6a3e8df68c",
        "name": "plant_type",
        "label": "Plant type (if none update tables)",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": true,
        "options": [],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 530,
        "y": 300,
        "wires": [
            [
                "23c415f45b9e5d43"
            ]
        ]
    },
    {
        "id": "d24ee61b3d054fc1",
        "type": "ui-button",
        "z": "6309eb19e3926174",
        "group": "85080b6a3e8df68c",
        "name": "",
        "label": "submit",
        "order": 4,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "submit",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 1370,
        "y": 280,
        "wires": [
            [
                "e7a51e901a4b175f"
            ]
        ]
    },
    {
        "id": "24d823a42526c69f",
        "type": "ui-text-input",
        "z": "6309eb19e3926174",
        "group": "85080b6a3e8df68c",
        "name": "plant_name",
        "label": "Plant name",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "payload",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "65974532f677bb8b"
            ]
        ]
    },
    {
        "id": "53ea7135faee9173",
        "type": "join",
        "z": "6309eb19e3926174",
        "name": "merge payloads",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 990,
        "y": 280,
        "wires": [
            [
                "cf1e2fbe5d891e29",
                "2a60eb0457ab0335"
            ]
        ]
    },
    {
        "id": "23c415f45b9e5d43",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"type_id\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "53ea7135faee9173"
            ]
        ]
    },
    {
        "id": "65974532f677bb8b",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"plant_name\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 260,
        "wires": [
            [
                "53ea7135faee9173"
            ]
        ]
    },
    {
        "id": "30f1f64d76134579",
        "type": "change",
        "z": "6309eb19e3926174",
        "name": "disable",
        "rules": [
            {
                "t": "change",
                "p": "enabled",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1220,
        "y": 240,
        "wires": [
            [
                "d24ee61b3d054fc1"
            ]
        ]
    },
    {
        "id": "e8530e2f24b86273",
        "type": "http request",
        "z": "6309eb19e3926174",
        "name": "PUT catalog/plants",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "catalog:8080/plants",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1870,
        "y": 280,
        "wires": [
            [
                "4f04daa0586e494b"
            ]
        ]
    },
    {
        "id": "230766c1512b050b",
        "type": "ui-text-input",
        "z": "6309eb19e3926174",
        "group": "85080b6a3e8df68c",
        "name": "plant_id",
        "label": "Plant ID",
        "order": 1,
        "width": 0,
        "height": 0,
        "topic": "payload",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "Make sure it is unique! Otherwise it will not be inserted.",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "sendOnClear": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "d6cad9c9a646242d"
            ]
        ]
    },
    {
        "id": "d6cad9c9a646242d",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"plant_id\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "53ea7135faee9173"
            ]
        ]
    },
    {
        "id": "a03918910676249a",
        "type": "inject",
        "z": "6309eb19e3926174",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "230766c1512b050b",
                "24d823a42526c69f"
            ]
        ]
    },
    {
        "id": "7d2ac7f2aa2e6b03",
        "type": "json",
        "z": "6309eb19e3926174",
        "name": "to json",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1690,
        "y": 280,
        "wires": [
            [
                "e8530e2f24b86273"
            ]
        ]
    },
    {
        "id": "cf1e2fbe5d891e29",
        "type": "change",
        "z": "6309eb19e3926174",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "d24ee61b3d054fc1"
            ]
        ]
    },
    {
        "id": "2e35a806db7738e4",
        "type": "inject",
        "z": "6309eb19e3926174",
        "name": "start",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "x": 1070,
        "y": 240,
        "wires": [
            [
                "30f1f64d76134579"
            ]
        ]
    },
    {
        "id": "2a60eb0457ab0335",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "store msg",
        "func": "// Store the incoming message in a flow variable\nflow.set('lastMessage', msg);\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e7a51e901a4b175f",
        "type": "function",
        "z": "6309eb19e3926174",
        "name": "function 2",
        "func": "// Retrieve the last input message stored in flow variable\nmsg = flow.get('lastMessage') || {}; // Use an empty object if not available\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 280,
        "wires": [
            [
                "7d2ac7f2aa2e6b03"
            ]
        ]
    },
    {
        "id": "4f04daa0586e494b",
        "type": "change",
        "z": "6309eb19e3926174",
        "name": "empty payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 160,
        "wires": [
            [
                "230766c1512b050b",
                "24d823a42526c69f"
            ]
        ]
    },
    {
        "id": "3cd6cbcfbaef6260",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "build url",
        "func": "var table_name = flow.get('table_name')\n// Check if table_name is defined\nif (table_name) {\n    // Initialize an array to hold the key-value pairs\n    var queryParams = [];\n\n    // Get the object from msg.payload\n    var inputObject = msg.payload;\n\n    // Validate that msg.payload is an object\n    if (typeof inputObject === 'object' && !Array.isArray(inputObject)) {\n        // Loop through each key in the input object\n        for (var key in inputObject) {\n            if (inputObject.hasOwnProperty(key)) {\n                // Encode the key and value and push to the queryParams array\n                var encodedKey = encodeURIComponent(key);\n                var encodedValue = encodeURIComponent(inputObject[key]);\n                queryParams.push(encodedKey + '=' + encodedValue); // Add each key-value pair\n            }\n        }\n\n        // Join the query parameters with '&&' and prepend the table name\n        var queryString = table_name + '?' + queryParams.join('&&');\n        \n        // Set the payload to the resulting query string\n        msg.payload = queryString;\n    } else {\n        // Handle case where payload is not a valid object\n        msg.payload = 'Invalid input: msg.payload should be an object.';\n    }\n} else {\n    // Handle case where table_name is not set\n    msg.payload = 'Error: table_name is not defined in flow context.';\n}\n\n// Return the modified msg object\nmsg.payload = `http://catalog:8080/${msg.payload}`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 160,
        "wires": [
            [
                "51ea684880bc6387"
            ]
        ]
    },
    {
        "id": "51ea684880bc6387",
        "type": "http request",
        "z": "1eee5e628cd61fbb",
        "name": "DELETE catalog/table_name?conditions",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1700,
        "y": 160,
        "wires": [
            [
                "57685b959268a03c"
            ]
        ]
    },
    {
        "id": "2f374a7d60eeeaac",
        "type": "ui-button",
        "z": "1eee5e628cd61fbb",
        "group": "6de228b42e7e4975",
        "name": "Delete",
        "label": "Delete",
        "order": 4,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 850,
        "y": 160,
        "wires": [
            [
                "3fa9b4e5583674e0"
            ]
        ]
    },
    {
        "id": "562ca628cb84a6b6",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "extract table names",
        "func": "// Input is assumed to be in msg.payload\nconst inputData = msg.payload;\n\n// Initialize output options\nlet options = [];\n\n// Check if inputData is an object\nif (inputData && typeof inputData === 'object') {\n    // Loop through each top-level key in the input object\n    for (let key in inputData) {\n        if (inputData.hasOwnProperty(key) && (key !== \"rooms\" && key !== \"shelves\" && key !== \"topics\" && key !== \"services\")) {\n            options.push({\n                \"label\": key,  // The name of the table to display\n                \"value\": key   // The same name to be sent when this option is selected\n            });\n        }\n    }\n} else {\n    node.error(\"Invalid input: msg.payload is not an object\", msg);\n}\n\n// Set the formatted options as the new payload\nmsg.options = options;\n\n// Return the modified message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "afcdb6528eabbda3"
            ]
        ]
    },
    {
        "id": "afcdb6528eabbda3",
        "type": "ui-dropdown",
        "z": "1eee5e628cd61fbb",
        "group": "6de228b42e7e4975",
        "name": "table",
        "label": "Table name",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": true,
        "options": [],
        "payload": "",
        "topic": "payload",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 410,
        "y": 120,
        "wires": [
            [
                "a7cfea0f7021bed0",
                "0795633b97c464e5"
            ]
        ]
    },
    {
        "id": "a7cfea0f7021bed0",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "adjust_payload",
        "func": "msg.payload = `http://catalog:8080/${msg.payload}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "8b598c647c7050a6"
            ]
        ]
    },
    {
        "id": "8b598c647c7050a6",
        "type": "http request",
        "z": "1eee5e628cd61fbb",
        "name": "GET catalog/table_name",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "4d54c7ce454fd5bf"
            ]
        ]
    },
    {
        "id": "d49fd5a5608eef2f",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "store msg",
        "func": "// Store the incoming message in a flow variable\nflow.set('lastMessage', msg);\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "3fa9b4e5583674e0",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "send stored message",
        "func": "// Retrieve the last input message stored in flow variable\nmsg = flow.get('lastMessage') || {}; // Use an empty object if not available\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 160,
        "wires": [
            [
                "465a7e0fea7f7440"
            ]
        ]
    },
    {
        "id": "465a7e0fea7f7440",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "send each row",
        "func": "// Initialize an empty list for collecting messages\nvar messages = [];\n\n// Check if msg.payload is an array\nif (Array.isArray(msg.payload)) {\n    // Loop through each object in the payload\n    for (var i = 0; i < msg.payload.length; i++) {\n        var obj = msg.payload[i];\n\n        // Create a new object to hold the first four elements\n        var newObj = {};\n        var count = 0;\n\n        // Loop through the properties of the object\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key) && count < 4) {\n                newObj[key] = obj[key]; // Add the property to newObj\n                count++; // Increment count of added elements\n            }\n        }\n\n        // Only add newObj to messages if it has properties\n        if (Object.keys(newObj).length > 0) {\n            messages.push({ payload: newObj }); // Wrap it in a payload object\n        }\n    }\n}\n\n// Send all messages at once\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "3cd6cbcfbaef6260"
            ]
        ]
    },
    {
        "id": "0795633b97c464e5",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "store table_name",
        "func": "// Store the incoming message in a flow variable\nflow.set('table_name', msg.payload)\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4d54c7ce454fd5bf",
        "type": "ui-table",
        "z": "1eee5e628cd61fbb",
        "group": "6de228b42e7e4975",
        "name": "table",
        "label": "text",
        "order": 3,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "checkbox",
        "columns": [],
        "x": 870,
        "y": 120,
        "wires": [
            [
                "d49fd5a5608eef2f"
            ]
        ]
    },
    {
        "id": "57685b959268a03c",
        "type": "function",
        "z": "1eee5e628cd61fbb",
        "name": "function 3",
        "func": "// Retrieve the last input message stored in flow variable\nmsg.payload = `http://catalog:8080/${flow.get('table_name')}`;\nreturn msg;  // Return the last message to be sent onwards\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 340,
        "wires": [
            [
                "8b598c647c7050a6"
            ]
        ]
    },
    {
        "id": "b86b03f9485df222",
        "type": "ui-text",
        "z": "1eee5e628cd61fbb",
        "group": "6de228b42e7e4975",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Delete explained",
        "label": "Select a table and which items to delete, then click the button below the table. Notice that you can't modify the structure of the rooms and shelves since it's fixed.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 490,
        "y": 320,
        "wires": []
    },
    {
        "id": "bda36f3b4ff88617",
        "type": "ui-text-input",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "type_id",
        "label": "Plant Type ID",
        "order": 2,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "Make sure it is unique! Otherwise it will not be inserted.",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 420,
        "y": 120,
        "wires": [
            [
                "78eca008dca96b72"
            ]
        ]
    },
    {
        "id": "fd9843210703f9bb",
        "type": "ui-text-input",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "type_name",
        "label": "Type name",
        "order": 3,
        "width": 0,
        "height": 0,
        "topic": "topic",
        "topicType": "msg",
        "mode": "text",
        "tooltip": "",
        "delay": 300,
        "passthru": true,
        "sendOnDelay": false,
        "sendOnBlur": true,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "sendOnClear": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "x": 410,
        "y": 160,
        "wires": [
            [
                "b26aac8814fc316d"
            ]
        ]
    },
    {
        "id": "b5172a25149f003f",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "vegetative_height",
        "label": "max height for the Vegetative state (cm)",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 390,
        "y": 200,
        "wires": [
            [
                "e4bef0b35abfe675"
            ]
        ]
    },
    {
        "id": "1b9b3cf46f073b83",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "mature_height",
        "label": "max height for the Mature state (cm)",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 400,
        "y": 240,
        "wires": [
            [
                "c3ec9c5848104ded"
            ]
        ]
    },
    {
        "id": "f1869ffde839d329",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "humidity_day",
        "label": "Humidity during the day (%)",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "29235fa69b7dbd61"
            ]
        ]
    },
    {
        "id": "39a94b30701e888e",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "humidity_night",
        "label": "Humidity during the night (%)",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 400,
        "y": 360,
        "wires": [
            [
                "d6437a2f4cdcb4d4"
            ]
        ]
    },
    {
        "id": "f5038aa781ae2f86",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "low_ph",
        "label": "Minimum soil pH",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "14",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 400,
        "wires": [
            [
                "3daa3d274f9daed5"
            ]
        ]
    },
    {
        "id": "a9ddbfec9cce7aaf",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "high_ph",
        "label": "Maximum soil pH",
        "tooltip": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "14",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "c96a05b81454a9d9"
            ]
        ]
    },
    {
        "id": "fc3e23470beab9a7",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "low_temp",
        "label": "Minimum Temperature (°C)",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "30",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 480,
        "wires": [
            [
                "38b24d531f3fd929"
            ]
        ]
    },
    {
        "id": "e13b408049784813",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "name": "high_temp",
        "label": "Highest Temperature (°C)",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "30",
        "step": 1,
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 520,
        "wires": [
            [
                "ab714613ef351ee4"
            ]
        ]
    },
    {
        "id": "9055d6bc5c189f7a",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "N_s",
        "label": "Nitrogen (ppm)",
        "tooltip": "",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 600,
        "wires": [
            [
                "572abaeb52187181"
            ]
        ]
    },
    {
        "id": "e2c9dca86c84849c",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "P_s",
        "label": "Phosphorus (ppm)",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 640,
        "wires": [
            [
                "87f311efda388b07"
            ]
        ]
    },
    {
        "id": "16dd18775fb42791",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "K_s",
        "label": "Potassium (ppm)",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 680,
        "wires": [
            [
                "7ea27944dacc6937"
            ]
        ]
    },
    {
        "id": "c858be2165b3d397",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "liters_s",
        "label": "Liters of water per day",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 720,
        "wires": [
            [
                "10f58ee4ba22caa1"
            ]
        ]
    },
    {
        "id": "48036420d0f17ad7",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "light_s",
        "label": "Hours of light per day",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "24",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 760,
        "wires": [
            [
                "e4419e072b2528f9"
            ]
        ]
    },
    {
        "id": "0235477d9636aceb",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "low_soil_moisture_s",
        "label": "Minimum soil moisture (%)",
        "tooltip": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 800,
        "wires": [
            [
                "8536463402a42803"
            ]
        ]
    },
    {
        "id": "5a06efac29dd30ed",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "high_soil_moisture_s",
        "label": "Maximum soil moisture (%)",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 840,
        "wires": [
            [
                "798efcab3ad684be"
            ]
        ]
    },
    {
        "id": "86bfa336ea36216e",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "low_co2_s",
        "label": "Minimum level of CO2 (ppm)",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 880,
        "wires": [
            [
                "84b5fdc7a4bb4e39"
            ]
        ]
    },
    {
        "id": "1c3298124433fdbb",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "name": "high_co2_s",
        "label": "Maximum level of CO2 (ppm)",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 920,
        "wires": [
            [
                "60306bd09b42fe89"
            ]
        ]
    },
    {
        "id": "7766576c31479be1",
        "type": "ui-button",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "",
        "label": "submit",
        "order": 12,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "submit",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 1550,
        "y": 1260,
        "wires": [
            [
                "b2058eb9329acb77"
            ]
        ]
    },
    {
        "id": "4daf8b7bb4fd07bf",
        "type": "join",
        "z": "c50d14a79c209768",
        "name": "merge payloads",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": true,
        "timeout": "",
        "count": "37",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1180,
        "y": 1260,
        "wires": [
            [
                "19fd9d2e60a72c43",
                "606d12bc6cc2b992"
            ]
        ]
    },
    {
        "id": "e4bef0b35abfe675",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"vegetative_height\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "b26aac8814fc316d",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"type_name\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "4d7f04964152598d",
        "type": "change",
        "z": "c50d14a79c209768",
        "name": "disable",
        "rules": [
            {
                "t": "change",
                "p": "enabled",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 1220,
        "wires": [
            [
                "7766576c31479be1"
            ]
        ]
    },
    {
        "id": "6f66de74d5145e4e",
        "type": "http request",
        "z": "c50d14a79c209768",
        "name": "PUT catalog/plant_types",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "catalog:8080/plant_types",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2330,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "78eca008dca96b72",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"type_id\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 120,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "98b7079a2122ddae",
        "type": "json",
        "z": "c50d14a79c209768",
        "name": "to json",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2130,
        "y": 1200,
        "wires": [
            [
                "6f66de74d5145e4e"
            ]
        ]
    },
    {
        "id": "19fd9d2e60a72c43",
        "type": "change",
        "z": "c50d14a79c209768",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1390,
        "y": 1260,
        "wires": [
            [
                "7766576c31479be1"
            ]
        ]
    },
    {
        "id": "01b8c24eed923423",
        "type": "inject",
        "z": "c50d14a79c209768",
        "name": "start",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "x": 1250,
        "y": 1220,
        "wires": [
            [
                "4d7f04964152598d"
            ]
        ]
    },
    {
        "id": "606d12bc6cc2b992",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "store msg",
        "func": "// Store the incoming message in a flow variable\nflow.set('lastMessage', msg);\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "b2058eb9329acb77",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "function 4",
        "func": "// Retrieve the last input message stored in flow variable\nmsg = flow.get('lastMessage') || {}; // Use an empty object if not available\n\nmsg.payload.plant_type = {\n    \"type_id\" : msg.payload.type_id,\n    \"type_name\": msg.payload.type_name,\n    \"vegetative_h\": msg.payload.vegetative_height,\n    \"mature_h\" : msg.payload.mature_height,\n    \"humidity_day\": msg.payload.humidity_day,\n    \"humidity_night\": msg.payload.humidity_night,\n    \"low_ph\": msg.payload.low_ph,\n    \"high_ph\": msg.payload.high_ph,\n    \"low_temp\": msg.payload.low_temp,\n    \"high_temp\": msg.payload.high_temp\n};\n\nmsg.payload.nutrients_s = {\n    \"type_id\" : msg.payload.type_id,\n    \"state\" : \"Seeding\",\n    \"N\" : msg.payload.N_s,\n    \"P\" : msg.payload.P_s,\n    \"K\": msg.payload.K_s,\n    \"liters\": msg.payload.liters_s,\n    \"light\": msg.payload.light_s,\n    \"low_soil_moisture\": msg.payload.low_soil_moisture_s,\n    \"high_soil_moisture\": msg.payload.high_soil_moisture_s,\n    \"low_CO2\": msg.payload.low_co2_s,\n    \"high_CO2\": msg.payload.high_co2_s\n};\n\nmsg.payload.nutrients_v = {\n    \"type_id\" : msg.payload.type_id,\n    \"state\" : \"Vegetative\",\n    \"N\": msg.payload.N_v,\n    \"P\": msg.payload.P_v,\n    \"K\": msg.payload.K_v,\n    \"liters\": msg.payload.liters_v,\n    \"light\": msg.payload.light_v,\n    \"low_soil_moisture\": msg.payload.low_soil_moisture_v,\n    \"high_soil_moisture\": msg.payload.high_soil_moisture_v,\n    \"low_CO2\": msg.payload.low_co2_v,\n    \"high_CO2\": msg.payload.high_co2_v\n};\n\nmsg.payload.nutrients_m = {\n    \"type_id\" : msg.payload.type_id,\n    \"state\" : \"Mature\",\n    \"N\": msg.payload.N_m,\n    \"P\": msg.payload.P_m,\n    \"K\": msg.payload.K_m,\n    \"liters\": msg.payload.liters_m,\n    \"light\": msg.payload.light_m,\n    \"low_soil_moisture\": msg.payload.low_soil_moisture_m,\n    \"high_soil_moisture\": msg.payload.high_soil_moisture_m,\n    \"low_CO2\": msg.payload.low_co2_m,\n    \"high_CO2\": msg.payload.high_co2_m\n};\n\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1260,
        "wires": [
            [
                "e51dd54465ccb392",
                "6ba3a25ef6119bf9",
                "0331d02a5b567f77",
                "55972a45c801bcf4"
            ]
        ]
    },
    {
        "id": "d6437a2f4cdcb4d4",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"humidity_night\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 360,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "29235fa69b7dbd61",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"humidity_day\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "c3ec9c5848104ded",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"mature_height\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "38b24d531f3fd929",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_temp\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 480,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "c96a05b81454a9d9",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_ph\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 440,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "3daa3d274f9daed5",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_ph\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 400,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "87f311efda388b07",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"P_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 640,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "572abaeb52187181",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"N_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 600,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "ab714613ef351ee4",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_temp\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 520,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "e4419e072b2528f9",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"light_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 760,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "10f58ee4ba22caa1",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"liters_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 720,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "7ea27944dacc6937",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"K_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 680,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "84b5fdc7a4bb4e39",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_co2_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 880,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "798efcab3ad684be",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_soil_moisture_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 840,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "8536463402a42803",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_soil_moisture_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "60306bd09b42fe89",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_co2_s\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 920,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "355e4ed3b3ae6393",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "N_v",
        "label": "Nitrogen (ppm)",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1000,
        "wires": [
            [
                "d26d420b05938b85"
            ]
        ]
    },
    {
        "id": "cba75ed439de2762",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "P_v",
        "label": "Phosphorus (ppm)",
        "tooltip": "",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "7245fd3f03e4db71"
            ]
        ]
    },
    {
        "id": "0301bb4d55156375",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "K_v",
        "label": "Potassium (ppm)",
        "tooltip": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1080,
        "wires": [
            [
                "bfb77b18848a53f3"
            ]
        ]
    },
    {
        "id": "ad38638e5d5b2316",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "liters_v",
        "label": "Liters of water per day",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "d36116385582b9b3"
            ]
        ]
    },
    {
        "id": "c9f7a89e6e2bc28b",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "light_v",
        "label": "Hours of light per day",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "24",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1160,
        "wires": [
            [
                "42e710c71e85bbd6"
            ]
        ]
    },
    {
        "id": "e5fedebde4c67853",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "low_soil_moisture_v",
        "label": "Minimum soil moisture (%)",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 1200,
        "wires": [
            [
                "94c34491b3d01c83"
            ]
        ]
    },
    {
        "id": "93c5fef482ac179f",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "high_soil_moisture_v",
        "label": "Maximum soil moisture (%)",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 1240,
        "wires": [
            [
                "239f0aa5f8bce3bb"
            ]
        ]
    },
    {
        "id": "e7dd754c33891a4c",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "low_co2_v",
        "label": "Minimum level of CO2 (ppm)",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 1280,
        "wires": [
            [
                "1f86ac48ff9db2e9"
            ]
        ]
    },
    {
        "id": "89595fd04e8e81d4",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "name": "high_co2_v",
        "label": "Maximum level of CO2 (ppm)",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 1320,
        "wires": [
            [
                "a007c96a9e51cb43"
            ]
        ]
    },
    {
        "id": "7245fd3f03e4db71",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"P_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "d26d420b05938b85",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"N_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1000,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "42e710c71e85bbd6",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"light_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1160,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "d36116385582b9b3",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"liters_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1120,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "bfb77b18848a53f3",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"K_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1080,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "1f86ac48ff9db2e9",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_co2_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1280,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "239f0aa5f8bce3bb",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_soil_moisture_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "94c34491b3d01c83",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_soil_moisture_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1200,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "a007c96a9e51cb43",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_co2_v\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "e1da61da84b2a324",
        "type": "ui-text",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Ideal values",
        "label": "Ideal values",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 410,
        "y": 280,
        "wires": []
    },
    {
        "id": "ee02e0c16eff860e",
        "type": "ui-template",
        "z": "c50d14a79c209768",
        "group": "",
        "page": "bc411709739d5075",
        "ui": "",
        "name": "image",
        "order": 1,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<div style=\"text-align: center\">\n    <img src=\"https://img.icons8.com/?size=100&id=gZKARN9f3quE&format=png&color=000000\" alt=\"Base64 Image\" style=\"max-width: 100%; height: auto;\" />\n</div>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "widget:page",
        "className": "",
        "x": 950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "4bb24ebb8f43b19f",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "N_m",
        "label": "Nitrogen (ppm)",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "70d546311cd1987f"
            ]
        ]
    },
    {
        "id": "5e18c4b9ca533d1c",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "P_m",
        "label": "Phosphorus (ppm)",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1440,
        "wires": [
            [
                "077f8ea06063387d"
            ]
        ]
    },
    {
        "id": "5a47f3ef9ef278e1",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "K_m",
        "label": "Potassium (ppm)",
        "tooltip": "",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.01",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 430,
        "y": 1480,
        "wires": [
            [
                "f9dd71c4e1ca87e3"
            ]
        ]
    },
    {
        "id": "45ec3456a7c679ea",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "liters_m",
        "label": "Liters of water per day",
        "tooltip": "",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "10",
        "step": "0.1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 1520,
        "wires": [
            [
                "b9213a4cfb0cfde8"
            ]
        ]
    },
    {
        "id": "7a1a02ed23df605f",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "light_m",
        "label": "Hours of light per day",
        "tooltip": "",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "24",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 420,
        "y": 1560,
        "wires": [
            [
                "30729add233463b7"
            ]
        ]
    },
    {
        "id": "e7b6d0d808995ecd",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "low_soil_moisture_m",
        "label": "Minimum soil moisture (%)",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 1600,
        "wires": [
            [
                "79c5c5372ca0ab4d"
            ]
        ]
    },
    {
        "id": "adaab43bee8219f9",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "high_soil_moisture_m",
        "label": "Maximum soil moisture (%)",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": 0,
        "max": "100",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 380,
        "y": 1640,
        "wires": [
            [
                "127859048f2fef96"
            ]
        ]
    },
    {
        "id": "e532013a3e690025",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "low_co2_m",
        "label": "Minimum level of CO2 (ppm)",
        "tooltip": "",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 1680,
        "wires": [
            [
                "372a3f324c22c384"
            ]
        ]
    },
    {
        "id": "6643254fadaa26ef",
        "type": "ui-slider",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "name": "high_co2_m",
        "label": "Maximum level of CO2 (ppm)",
        "tooltip": "",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "100",
        "max": "1500",
        "step": "1",
        "className": "",
        "iconPrepend": "",
        "iconAppend": "",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "x": 410,
        "y": 1720,
        "wires": [
            [
                "ba8cdf541656fdca"
            ]
        ]
    },
    {
        "id": "077f8ea06063387d",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"P_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1440,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "70d546311cd1987f",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"N_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1400,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "30729add233463b7",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"light_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1560,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "b9213a4cfb0cfde8",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"liters_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1520,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "f9dd71c4e1ca87e3",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"K_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1480,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "372a3f324c22c384",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_co2_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1680,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "127859048f2fef96",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_soil_moisture_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1640,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "79c5c5372ca0ab4d",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"low_soil_moisture_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1600,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "ba8cdf541656fdca",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "adjust_payload",
        "func": "msg.payload = {\n    \"high_co2_m\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1720,
        "wires": [
            [
                "4daf8b7bb4fd07bf"
            ]
        ]
    },
    {
        "id": "b26e757dd41f65d7",
        "type": "ui-text",
        "z": "c50d14a79c209768",
        "group": "a86564b2e33734ee",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Text explain",
        "label": "Add below and in the Seeding, Vedetative and Mature group all the values needed to add the new type of plant to the farm. ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "578d9ef2f97d2ed9",
        "type": "ui-text",
        "z": "c50d14a79c209768",
        "group": "46e90799a4604e92",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Text explain s",
        "label": "Select below all the ideal values for the Seeding stage of the plant type you want to add.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 400,
        "y": 560,
        "wires": []
    },
    {
        "id": "40dd3ee55705a72f",
        "type": "ui-text",
        "z": "c50d14a79c209768",
        "group": "449c33fdc710fc29",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Text explain v",
        "label": "Select below all the ideal values for the Vegetative stage of the plant type you want to add.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 400,
        "y": 960,
        "wires": []
    },
    {
        "id": "6428cd044ad20469",
        "type": "ui-text",
        "z": "c50d14a79c209768",
        "group": "6e375fabdc544e4e",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Text explain m",
        "label": "Select below all the ideal values for the Mature stage of the plant type you want to add. The click the submit button.",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 400,
        "y": 1360,
        "wires": []
    },
    {
        "id": "26cbab318688f0e4",
        "type": "inject",
        "z": "c50d14a79c209768",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "bda36f3b4ff88617",
                "fd9843210703f9bb"
            ]
        ]
    },
    {
        "id": "e51dd54465ccb392",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "plant_type",
        "func": "msg.payload = msg.payload.plant_type;\nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1200,
        "wires": [
            [
                "98b7079a2122ddae"
            ]
        ]
    },
    {
        "id": "6ba3a25ef6119bf9",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "nutrients s",
        "func": "msg.payload = msg.payload.nutrients_s;\nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1240,
        "wires": [
            [
                "a6640341bb5c9e09"
            ]
        ]
    },
    {
        "id": "0331d02a5b567f77",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "nutrients v",
        "func": "msg.payload = msg.payload.nutrients_v;\nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1280,
        "wires": [
            [
                "1aa13242d4945210"
            ]
        ]
    },
    {
        "id": "55972a45c801bcf4",
        "type": "function",
        "z": "c50d14a79c209768",
        "name": "nutrients m",
        "func": "msg.payload = msg.payload.nutrients_m;\nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 1320,
        "wires": [
            [
                "fb9c69f891b54a23"
            ]
        ]
    },
    {
        "id": "aa9260f670320f95",
        "type": "http request",
        "z": "c50d14a79c209768",
        "name": "PUT catalog/plant_nutrients",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "catalog:8080/plant_nutrients",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2340,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "a6640341bb5c9e09",
        "type": "json",
        "z": "c50d14a79c209768",
        "name": "to json",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2130,
        "y": 1240,
        "wires": [
            [
                "aa9260f670320f95"
            ]
        ]
    },
    {
        "id": "1aa13242d4945210",
        "type": "json",
        "z": "c50d14a79c209768",
        "name": "to json",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2130,
        "y": 1280,
        "wires": [
            [
                "aa9260f670320f95"
            ]
        ]
    },
    {
        "id": "fb9c69f891b54a23",
        "type": "json",
        "z": "c50d14a79c209768",
        "name": "to json",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 2130,
        "y": 1320,
        "wires": [
            [
                "aa9260f670320f95"
            ]
        ]
    },
    {
        "id": "1fc41a474b4421cc",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET catalog/all",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "catalog:8080/all",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "a1c8d563a918c133",
                "045639306f695d7e",
                "84ba838a9e6262df",
                "2a75d622b158c7a4",
                "0661a18a247fdc47",
                "02ec3bde48bc598b",
                "97f2674b47f4f351",
                "57f33f9db8638aca"
            ]
        ]
    },
    {
        "id": "a1c8d563a918c133",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract plants",
        "func": "msg.payload = msg.payload.plants;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "94abc4c241acdf47"
            ]
        ]
    },
    {
        "id": "045639306f695d7e",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract plant nutrients",
        "func": "msg.payload = msg.payload.plant_nutrients;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "4a9d3218bc25d186"
            ]
        ]
    },
    {
        "id": "84ba838a9e6262df",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract plant types",
        "func": "msg.payload = msg.payload.plant_types;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "0c3c31efddd58043",
                "35492eefc0b1da95"
            ]
        ]
    },
    {
        "id": "2a75d622b158c7a4",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract rooms",
        "func": "msg.payload = msg.payload.rooms;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 360,
        "wires": [
            [
                "c5b192ac309b1ea4"
            ]
        ]
    },
    {
        "id": "0661a18a247fdc47",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract shelves",
        "func": "msg.payload = msg.payload.shelves;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            [
                "4f72891b3e093ef9",
                "7b51981890f53e75"
            ]
        ]
    },
    {
        "id": "d2e457f6ebb4a089",
        "type": "inject",
        "z": "743c2946bb229b64",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "1fc41a474b4421cc",
                "4a7ec6b4c501f7e4",
                "7af0358fd452789d"
            ]
        ]
    },
    {
        "id": "4a9d3218bc25d186",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table plant nutrients",
        "label": "text",
        "order": 9,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 950,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0c3c31efddd58043",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table plant types",
        "label": "text",
        "order": 5,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 940,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c5b192ac309b1ea4",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table rooms",
        "label": "text",
        "order": 7,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 930,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "4f72891b3e093ef9",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table shelves",
        "label": "text",
        "order": 11,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 930,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "35492eefc0b1da95",
        "type": "subflow:6309eb19e3926174",
        "z": "743c2946bb229b64",
        "name": "",
        "x": 840,
        "y": 280,
        "wires": [
            [
                "0e700279aa7f866a",
                "5b2bc6aa7277b46f"
            ]
        ]
    },
    {
        "id": "02ec3bde48bc598b",
        "type": "subflow:1eee5e628cd61fbb",
        "z": "743c2946bb229b64",
        "name": "",
        "x": 830,
        "y": 160,
        "wires": [
            [
                "5cdfb135d0dc4132"
            ]
        ]
    },
    {
        "id": "503a1cba6c6f4ef3",
        "type": "ui-button",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "Prefill catalog",
        "label": "! Prefill database ! ",
        "order": 1,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "buttonColor": "#F44336",
        "textColor": "",
        "iconColor": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "3a112987feda9277"
            ]
        ]
    },
    {
        "id": "3a112987feda9277",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "POST catalog/prefill",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "catalog:8080/prefill",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "6512084b1f7e11fb"
            ]
        ]
    },
    {
        "id": "82c774ce2b42c422",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Plants",
        "label": "Plants",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1230,
        "y": 200,
        "wires": []
    },
    {
        "id": "94abc4c241acdf47",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table plants",
        "label": "text",
        "order": 3,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 930,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "49b287946a7674ca",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Plant nutrients",
        "label": "Plant nutrients",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1260,
        "y": 400,
        "wires": []
    },
    {
        "id": "d9c1f884c4105fe5",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Plant types",
        "label": "Plant types",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1250,
        "y": 240,
        "wires": []
    },
    {
        "id": "dfc15604d05999a6",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Rooms",
        "label": "Rooms",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1240,
        "y": 360,
        "wires": []
    },
    {
        "id": "fb99a14875134df4",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "Shelves",
        "label": "Shelves",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "57f33f9db8638aca",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract topics",
        "func": "msg.payload = msg.payload.topics;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "43e3938fba70c609"
            ]
        ]
    },
    {
        "id": "43e3938fba70c609",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table topics",
        "label": "text",
        "order": 13,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 930,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "97f2674b47f4f351",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract services",
        "func": "msg.payload = msg.payload.services;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "4835aa604d2787ef"
            ]
        ]
    },
    {
        "id": "4835aa604d2787ef",
        "type": "ui-table",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "name": "table services",
        "label": "text",
        "order": 15,
        "width": 0,
        "height": 0,
        "maxrows": 0,
        "passthru": false,
        "autocols": true,
        "showSearch": true,
        "selectionType": "none",
        "columns": [],
        "x": 940,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "fef64d7474b01cec",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Topics",
        "label": "Topics",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1230,
        "y": 600,
        "wires": []
    },
    {
        "id": "29b0f1ca2eb14335",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "4fb965676ff2d0f1",
        "order": 14,
        "width": 0,
        "height": 0,
        "name": "Services",
        "label": "Services",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "18",
        "color": "#717171",
        "className": "",
        "x": 1240,
        "y": 520,
        "wires": []
    },
    {
        "id": "9928843376314653",
        "type": "ui-notification",
        "z": "743c2946bb229b64",
        "ui": "d1834bd129d4d038",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "raw": false,
        "className": "",
        "name": "prefilled",
        "x": 680,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "6512084b1f7e11fb",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "\"A prefilled db has been set. Notice that also topics and services are cancelled. You may need to reconnect them.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 100,
        "wires": [
            [
                "9928843376314653"
            ]
        ]
    },
    {
        "id": "433ebeb345a3fcb1",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Welcome text",
        "label": "Welcome to the dashboard. Here you can monitor the farm!",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial,Arial,Helvetica,sans-serif",
        "fontSize": "15",
        "color": "#717171",
        "className": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "0e700279aa7f866a",
        "type": "switch",
        "z": "743c2946bb229b64",
        "name": "check for conflict",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "409",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "4bc8310264a7c0e8"
            ]
        ]
    },
    {
        "id": "40154fd325fa7170",
        "type": "ui-notification",
        "z": "743c2946bb229b64",
        "ui": "d1834bd129d4d038",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "A conflict has been found! The table hasn't been updated.",
        "raw": false,
        "className": "",
        "name": "CONFLICT",
        "x": 1450,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "4bc8310264a7c0e8",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "conflict",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 280,
        "wires": [
            [
                "40154fd325fa7170"
            ]
        ]
    },
    {
        "id": "5b2bc6aa7277b46f",
        "type": "switch",
        "z": "743c2946bb229b64",
        "name": "check for no conflict",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1080,
        "y": 320,
        "wires": [
            [
                "c176d9d5b1cffda7"
            ]
        ]
    },
    {
        "id": "83fe051a5ea2cb0d",
        "type": "ui-notification",
        "z": "743c2946bb229b64",
        "ui": "d1834bd129d4d038",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "The table has been uptated with success!",
        "raw": false,
        "className": "",
        "name": "NO CONFLICT",
        "x": 1460,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c176d9d5b1cffda7",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "no conflict",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "83fe051a5ea2cb0d"
            ]
        ]
    },
    {
        "id": "5cdfb135d0dc4132",
        "type": "switch",
        "z": "743c2946bb229b64",
        "name": "check for OK code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 160,
        "wires": [
            [
                "923b83e0d0d17307"
            ]
        ]
    },
    {
        "id": "2b2a20df03b12716",
        "type": "ui-notification",
        "z": "743c2946bb229b64",
        "ui": "d1834bd129d4d038",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "The table (and related ones) have been uptated with success!",
        "raw": false,
        "className": "",
        "name": "OK",
        "x": 1390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "923b83e0d0d17307",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "no conflict",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 160,
        "wires": [
            [
                "2b2a20df03b12716"
            ]
        ]
    },
    {
        "id": "4a7ec6b4c501f7e4",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET catalog/services",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "catalog:8080/services",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 360,
        "y": 700,
        "wires": [
            [
                "f705d2b666a52131"
            ]
        ]
    },
    {
        "id": "f705d2b666a52131",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract serivice data analysis",
        "func": "if (Array.isArray(msg.payload) && msg.payload.length > 0) {\n  // Loop through the entire array\n  for (const device of msg.payload) {\n    if (device.name === \"data_analysis\") {\n      // Found the device, construct the URL\n      flow.set('url', `${device.host}:${device.port}`);\n      msg.payload = flow.get(\"url\"); // for debug\n      break;  // Exit the loop once a match is found\n    }\n  }\n\n  // If no match is found, set the URL to an empty string\n  if (!flow.get('url')) {\n    flow.set('url', \"\");\n  }\n} else {\n  // Handle the case where msg.payload is not an array or empty\n  flow.set('url', \"\"); // Set URL to empty string\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7b51981890f53e75",
        "type": "link out",
        "z": "743c2946bb229b64",
        "name": "extract shelves",
        "mode": "link",
        "links": [
            "1379feb234b24208",
            "7bc23f6d024b4597",
            "38e4e15fb2438a34",
            "bd80dd4dd4c32521",
            "66ae628f7b58b125",
            "db904cc38820dc0d",
            "03be6f98336e22e6",
            "042c6dd7170506a2"
        ],
        "x": 785,
        "y": 580,
        "wires": []
    },
    {
        "id": "1379feb234b24208",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 1",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 165,
        "y": 840,
        "wires": [
            [
                "8b4b4382562fa79d"
            ]
        ]
    },
    {
        "id": "ad287170d2c5666b",
        "type": "subflow:c50d14a79c209768",
        "z": "743c2946bb229b64",
        "x": 930,
        "y": 100,
        "wires": [
            [
                "062f507a09519f5b"
            ]
        ]
    },
    {
        "id": "062f507a09519f5b",
        "type": "switch",
        "z": "743c2946bb229b64",
        "name": "check for OK code",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1150,
        "y": 100,
        "wires": [
            [
                "468f7193856f4f6b"
            ]
        ]
    },
    {
        "id": "17c97ef8eb3c8404",
        "type": "ui-notification",
        "z": "743c2946bb229b64",
        "ui": "d1834bd129d4d038",
        "position": "top center",
        "colorDefault": true,
        "color": "#000000",
        "displayTime": "10",
        "showCountdown": true,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "The new plant type has been successfully added to the farm!",
        "raw": false,
        "className": "",
        "name": "OK",
        "x": 1510,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "468f7193856f4f6b",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "no conflict",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 100,
        "wires": [
            [
                "17c97ef8eb3c8404"
            ]
        ]
    },
    {
        "id": "19c431c0c3270de2",
        "type": "ui-dropdown",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "Select shelf",
        "label": "Select a shelf",
        "tooltip": "",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 430,
        "y": 840,
        "wires": [
            [
                "b40c6dd35f7c5b18"
            ]
        ]
    },
    {
        "id": "8b4b4382562fa79d",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "function 5",
        "func": "// Input is assumed to be in msg.payload\nconst shelves = msg.payload; // This should be your array of plant objects\nlet options = [];\n\n// Loop through each plant type and create an object for the dropdown\nfor (let shelf of shelves) {\n    options.push({\n        \"label\" : \"Room \" + shelf.room_id + \", Tower \" + shelf.tower_id + \", Shelf \" + shelf.shelf_id, // The name to display in the dropdown\n        \"value\": shelf   // The ID to be sent when this option is selected\n    });\n}\n\n// Set the formatted options as the new payload\nmsg.options = options;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 840,
        "wires": [
            [
                "19c431c0c3270de2",
                "d992cc63d5a49655"
            ]
        ]
    },
    {
        "id": "4f87b8eadb3e7ab7",
        "type": "ui-dropdown",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "Select sensor",
        "label": "Select a sensor",
        "tooltip": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "Room Temperature",
                "value": "temp",
                "type": "str"
            },
            {
                "label": "Room Humidity",
                "value": "humid",
                "type": "str"
            },
            {
                "label": "Room CO2 level",
                "value": "co2",
                "type": "str"
            },
            {
                "label": "Water Tank Level",
                "value": "water",
                "type": "str"
            },
            {
                "label": "Soil pH",
                "value": "ph",
                "type": "str"
            },
            {
                "label": "Soil Moisture",
                "value": "moisture",
                "type": "str"
            },
            {
                "label": "Soil Nitrogen level (N)",
                "value": "n",
                "type": "str"
            },
            {
                "label": "Soil Phosphorus level (P)",
                "value": "p",
                "type": "str"
            },
            {
                "label": "Soil Potassium level (K)",
                "value": "k",
                "type": "str"
            },
            {
                "label": "Plants Height",
                "value": "height",
                "type": "str"
            },
            {
                "label": "Shelf Light Intensity",
                "value": "li",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 420,
        "y": 880,
        "wires": [
            [
                "cac4ec0ee3bd3898"
            ]
        ]
    },
    {
        "id": "fce918b66a22775d",
        "type": "ui-button",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "submit ",
        "label": "submit",
        "order": 5,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "submit",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 1190,
        "y": 880,
        "wires": [
            [
                "b8519fb139a18df2"
            ]
        ]
    },
    {
        "id": "b39ffab3fe7493d1",
        "type": "join",
        "z": "743c2946bb229b64",
        "name": "merge payloads",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 830,
        "y": 880,
        "wires": [
            [
                "d08d9cdfb5b55469",
                "d60513916b9d7685"
            ]
        ]
    },
    {
        "id": "435946d736ee0cbb",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "disable",
        "rules": [
            {
                "t": "change",
                "p": "enabled",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 840,
        "wires": [
            [
                "fce918b66a22775d"
            ]
        ]
    },
    {
        "id": "d08d9cdfb5b55469",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 880,
        "wires": [
            [
                "fce918b66a22775d"
            ]
        ]
    },
    {
        "id": "b5fd551d82af39ac",
        "type": "inject",
        "z": "743c2946bb229b64",
        "name": "start",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "x": 890,
        "y": 840,
        "wires": [
            [
                "435946d736ee0cbb"
            ]
        ]
    },
    {
        "id": "d60513916b9d7685",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "store msg",
        "func": "// Store the incoming message in a flow variable\nflow.set('plot_of', msg);\nmsg = flow.get('plot_of');\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "b8519fb139a18df2",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nmsg = flow.get('plot_of') || {}; // Use an empty object if not available\nlet url = flow.get('url');\nmsg.payload = `${url}/plot?room=${msg.payload.shelf.room_id}&tower=${msg.payload.shelf.tower_id}&shelf=${msg.payload.shelf.shelf_id}&sensor=${msg.payload.sensor}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 880,
        "wires": [
            [
                "8a5fac54effba8e4",
                "2c6507d63e711b09"
            ]
        ]
    },
    {
        "id": "8a5fac54effba8e4",
        "type": "debug",
        "z": "743c2946bb229b64",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 960,
        "wires": []
    },
    {
        "id": "cac4ec0ee3bd3898",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "adjust payload",
        "func": "msg.payload = {\n    \"sensor\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 880,
        "wires": [
            [
                "b39ffab3fe7493d1"
            ]
        ]
    },
    {
        "id": "b40c6dd35f7c5b18",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "adjust payload",
        "func": "msg.payload = {\n    \"shelf\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 840,
        "wires": [
            [
                "b39ffab3fe7493d1"
            ]
        ]
    },
    {
        "id": "2c6507d63e711b09",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../plot",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 880,
        "wires": [
            [
                "29ce0d484840822e"
            ]
        ]
    },
    {
        "id": "80a9306c5245f6bd",
        "type": "ui-template",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "page": "",
        "ui": "",
        "name": "show plot",
        "order": 6,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<div style=\"text-align: center;\">\n  <img :src=\"msg.payload\" width=\"800\">\n</div>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1960,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "29ce0d484840822e",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract image",
        "func": "msg.payload = 'data:image/jpeg;base64,' + msg.payload.bs4_img;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 880,
        "wires": [
            [
                "80a9306c5245f6bd"
            ]
        ]
    },
    {
        "id": "31707338b1343c49",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "temp R1",
        "group": "0976cfd78f1aded6",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#00e1ff"
            },
            {
                "from": "15",
                "color": "#5cd65c"
            },
            {
                "from": "30",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "50",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1400,
        "wires": []
    },
    {
        "id": "f09003688a5f7286",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Plot explained",
        "label": "Plot sensor data in time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#4f4f4f",
        "className": "",
        "x": 420,
        "y": 800,
        "wires": []
    },
    {
        "id": "7bc23f6d024b4597",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 2",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 165,
        "y": 1100,
        "wires": [
            [
                "f33b7fde904c14d8"
            ]
        ]
    },
    {
        "id": "1fd075446f6cb37d",
        "type": "ui-dropdown",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "Select room",
        "label": "Select a room",
        "tooltip": "",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "e750c8159efbbe7d"
            ]
        ]
    },
    {
        "id": "f33b7fde904c14d8",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "function 6",
        "func": "const shelves = msg.payload; // This should be your array of plant objects\nlet options = [];\nlet labelsSeen = new Set();\n\nfor (let shelf of shelves) {\n  const label = \"Room \" + shelf.room_id;\n  if (!labelsSeen.has(label)) {\n    options.push({\n      label: label,\n      value: shelf.room_id\n    });\n    labelsSeen.add(label);\n  }\n}\n\nmsg.options = options;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1100,
        "wires": [
            [
                "1fd075446f6cb37d",
                "4c6d5dadd19f76dc"
            ]
        ]
    },
    {
        "id": "175f7fadcab990b9",
        "type": "ui-dropdown",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "Select sensor 2",
        "label": "Select a sensor",
        "tooltip": "",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "chips": false,
        "clearable": false,
        "options": [
            {
                "label": "Soil pH",
                "value": "ph",
                "type": "str"
            },
            {
                "label": "Soil Moisture",
                "value": "moisture",
                "type": "str"
            },
            {
                "label": "Soil Nitrogen level (N)",
                "value": "n",
                "type": "str"
            },
            {
                "label": "Soil Phosphorus level (P)",
                "value": "p",
                "type": "str"
            },
            {
                "label": "Soil Potassium level (K)",
                "value": "k",
                "type": "str"
            },
            {
                "label": "Plants Height",
                "value": "height",
                "type": "str"
            },
            {
                "label": "Shelf Light Intensity",
                "value": "li",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "typeIsComboBox": true,
        "x": 420,
        "y": 1140,
        "wires": [
            [
                "2b3498e748ac86c3"
            ]
        ]
    },
    {
        "id": "7ce4b7f35a9e66f4",
        "type": "ui-button",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "name": "submit 2",
        "label": "submit",
        "order": 10,
        "width": 0,
        "height": 0,
        "emulateClick": false,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "true",
        "payloadType": "bool",
        "topic": "submit",
        "topicType": "msg",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "x": 1200,
        "y": 1140,
        "wires": [
            [
                "ef12a7fa3933a007"
            ]
        ]
    },
    {
        "id": "7293e3748a5dd5ac",
        "type": "join",
        "z": "743c2946bb229b64",
        "name": "merge payloads",
        "mode": "custom",
        "build": "merged",
        "property": "payload",
        "propertyType": "msg",
        "key": "payload",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": true,
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 830,
        "y": 1140,
        "wires": [
            [
                "d8f97fdde2cbb2de",
                "09b3145aaeeb14c0"
            ]
        ]
    },
    {
        "id": "0256461d87a123e6",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "disable",
        "rules": [
            {
                "t": "change",
                "p": "enabled",
                "pt": "msg",
                "from": "true",
                "fromt": "bool",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1100,
        "wires": [
            [
                "7ce4b7f35a9e66f4"
            ]
        ]
    },
    {
        "id": "d8f97fdde2cbb2de",
        "type": "change",
        "z": "743c2946bb229b64",
        "name": "enable",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 1140,
        "wires": [
            [
                "7ce4b7f35a9e66f4"
            ]
        ]
    },
    {
        "id": "62f870b8e504019f",
        "type": "inject",
        "z": "743c2946bb229b64",
        "name": "start",
        "props": [
            {
                "p": "enabled",
                "v": "false",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "topic": "",
        "x": 890,
        "y": 1100,
        "wires": [
            [
                "0256461d87a123e6"
            ]
        ]
    },
    {
        "id": "09b3145aaeeb14c0",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "store msg",
        "func": "// Store the incoming message in a flow variable\nflow.set('plot_of', msg);\nmsg = flow.get('plot_of'); // debug\nreturn msg;  // Pass the message along the flow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "ef12a7fa3933a007",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nmsg = flow.get('plot_of') || {}; // Use an empty object if not available\nlet url = flow.get('url');\nmsg.payload = `${url}/plot_compare_shelves?room=${msg.payload.room_id}&sensor=${msg.payload.sensor}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1140,
        "wires": [
            [
                "d0271753ae5271a8",
                "695823ebff7c03c8"
            ]
        ]
    },
    {
        "id": "d0271753ae5271a8",
        "type": "debug",
        "z": "743c2946bb229b64",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 1220,
        "wires": []
    },
    {
        "id": "2b3498e748ac86c3",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "adjust payload",
        "func": "msg.payload = {\n    \"sensor\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "7293e3748a5dd5ac"
            ]
        ]
    },
    {
        "id": "e750c8159efbbe7d",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "adjust payload",
        "func": "msg.payload = {\n    \"room_id\": msg.payload // Assign existing payload to plant_id\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "7293e3748a5dd5ac"
            ]
        ]
    },
    {
        "id": "695823ebff7c03c8",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../plot",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 1140,
        "wires": [
            [
                "f09566344cac7979"
            ]
        ]
    },
    {
        "id": "bd2b44d5af0242ea",
        "type": "ui-template",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "page": "",
        "ui": "",
        "name": "show plot 2",
        "order": 11,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<div style=\"text-align: center;\">\n  <img :src=\"msg.payload\" width=\"800\">\n</div>",
        "storeOutMessages": true,
        "passthru": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1970,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "f09566344cac7979",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "extract image",
        "func": "msg.payload = 'data:image/jpeg;base64,' + msg.payload.bs4_img;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1140,
        "wires": [
            [
                "bd2b44d5af0242ea"
            ]
        ]
    },
    {
        "id": "52194fb096286009",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "f323f236d8565c08",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "Plot compare explained",
        "label": "Plot sensors comparrison between shelves",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "20",
        "color": "#717171",
        "className": "",
        "x": 370,
        "y": 1060,
        "wires": []
    },
    {
        "id": "687e924189afe797",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1400,
        "wires": [
            [
                "13b7b5b4e8ce32ea"
            ]
        ]
    },
    {
        "id": "13b7b5b4e8ce32ea",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1400,
        "wires": [
            [
                "31707338b1343c49"
            ]
        ]
    },
    {
        "id": "009aa91a3478e327",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&sensor=temp&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1400,
        "wires": [
            [
                "687e924189afe797",
                "99c8fb5538781d0f"
            ]
        ]
    },
    {
        "id": "7af0358fd452789d",
        "type": "link out",
        "z": "743c2946bb229b64",
        "name": "start",
        "mode": "link",
        "links": [
            "5b48933fe085a5e5",
            "ec57c441f92fe058"
        ],
        "x": 305,
        "y": 300,
        "wires": []
    },
    {
        "id": "f6b840661bceefa7",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "humid R1",
        "group": "0976cfd78f1aded6",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#00e1ff"
            },
            {
                "from": "33",
                "color": "#4bc2d2"
            },
            {
                "from": "66",
                "color": "#23a4a2"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ec8851014b95e107",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1460,
        "wires": [
            [
                "8c9f7d028386f1ac"
            ]
        ]
    },
    {
        "id": "8c9f7d028386f1ac",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1460,
        "wires": [
            [
                "f6b840661bceefa7"
            ]
        ]
    },
    {
        "id": "f0131ed2310c3a76",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&sensor=humid&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1460,
        "wires": [
            [
                "ec8851014b95e107"
            ]
        ]
    },
    {
        "id": "cc28bdcba9158739",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "CO2 R1",
        "group": "0976cfd78f1aded6",
        "order": 3,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "CO2",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "100",
                "color": "#00ff1e"
            },
            {
                "from": "350",
                "color": "#abd65c"
            },
            {
                "from": "800",
                "color": "#ea9c53"
            },
            {
                "from": "1000",
                "color": "#e22c2c"
            }
        ],
        "min": "100",
        "max": "1500",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1520,
        "wires": []
    },
    {
        "id": "dc76a3e4bd3d4d31",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1520,
        "wires": [
            [
                "d13e7ac4e1190643"
            ]
        ]
    },
    {
        "id": "d13e7ac4e1190643",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1520,
        "wires": [
            [
                "cc28bdcba9158739"
            ]
        ]
    },
    {
        "id": "413abdfe8d927fe0",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&sensor=co2&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1520,
        "wires": [
            [
                "dc76a3e4bd3d4d31"
            ]
        ]
    },
    {
        "id": "1fdd9db1ec6e3a24",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "temp R2",
        "group": "5b2a8493ef893903",
        "order": 1,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Temperature",
        "units": "°C",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#00e1ff"
            },
            {
                "from": "15",
                "color": "#5cd65c"
            },
            {
                "from": "30",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "50",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1400,
        "wires": []
    },
    {
        "id": "321d5f4e8068da3c",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1400,
        "wires": [
            [
                "f3a49088ce9c5981"
            ]
        ]
    },
    {
        "id": "f3a49088ce9c5981",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1400,
        "wires": [
            [
                "1fdd9db1ec6e3a24"
            ]
        ]
    },
    {
        "id": "75c621f0fb474d91",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&sensor=temp&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1400,
        "wires": [
            [
                "321d5f4e8068da3c"
            ]
        ]
    },
    {
        "id": "ec57c441f92fe058",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 4",
        "links": [
            "7af0358fd452789d"
        ],
        "x": 95,
        "y": 1460,
        "wires": [
            [
                "fa86634a07d7a96e"
            ]
        ]
    },
    {
        "id": "43aa946a5fd4c1d8",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "humid R2",
        "group": "5b2a8493ef893903",
        "order": 2,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Humidity",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#00e1ff"
            },
            {
                "from": "33",
                "color": "#4bc2d2"
            },
            {
                "from": "66",
                "color": "#23a4a2"
            }
        ],
        "min": 0,
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ce40504e28a1ce65",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1460,
        "wires": [
            [
                "56cfab2626c91a28"
            ]
        ]
    },
    {
        "id": "56cfab2626c91a28",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1460,
        "wires": [
            [
                "43aa946a5fd4c1d8"
            ]
        ]
    },
    {
        "id": "3e8c8feec297beb4",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&sensor=humid&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1460,
        "wires": [
            [
                "ce40504e28a1ce65"
            ]
        ]
    },
    {
        "id": "28cba99d88520cd8",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "CO2 R2",
        "group": "5b2a8493ef893903",
        "order": 3,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "CO2",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "100",
                "color": "#00ff1e"
            },
            {
                "from": "350",
                "color": "#abd65c"
            },
            {
                "from": "800",
                "color": "#ea9c53"
            },
            {
                "from": "1000",
                "color": "#e22c2c"
            }
        ],
        "min": "100",
        "max": "1500",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1520,
        "wires": []
    },
    {
        "id": "db7c22bdd58133b9",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1520,
        "wires": [
            [
                "a1160ff49482227d"
            ]
        ]
    },
    {
        "id": "a1160ff49482227d",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1520,
        "wires": [
            [
                "28cba99d88520cd8"
            ]
        ]
    },
    {
        "id": "1f79ce18bb82b022",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&sensor=co2&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1520,
        "wires": [
            [
                "db7c22bdd58133b9"
            ]
        ]
    },
    {
        "id": "fa86634a07d7a96e",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "current date and time -1m",
        "func": "function formatDate(isoString) {\n  // Split the string into date and time parts\n  const [datePart, timePart] = isoString.split('T');\n\n  // Remove the fractional seconds part\n  const timeWithoutMillis = timePart.split('.')[0];\n\n  // Combine the formatted parts\n  const formattedDate = `${datePart} ${timeWithoutMillis}`;\n\n  return formattedDate;\n}\n\nlet date = new Date();\ndate.setMinutes(date.getMinutes() - 3); // minus 1 min to get the last 2 sensor output\nconst isoString = date.toISOString();\nconst formattedString = formatDate(isoString);\nmsg.payload = formattedString;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "413abdfe8d927fe0",
                "f0131ed2310c3a76",
                "009aa91a3478e327",
                "bb76c8c60074cfe0"
            ]
        ]
    },
    {
        "id": "b7f39caa501a435e",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "0976cfd78f1aded6",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Tower1, Shelf S1",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 770,
        "y": 1580,
        "wires": []
    },
    {
        "id": "7c6cd153e93fba61",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "pH T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 5,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3492ebd8eb7e845e",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1620,
        "wires": [
            [
                "e82c1fc79d4d96e7"
            ]
        ]
    },
    {
        "id": "e82c1fc79d4d96e7",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1620,
        "wires": [
            [
                "7c6cd153e93fba61"
            ]
        ]
    },
    {
        "id": "e6df279bf2382a21",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1620,
        "wires": [
            [
                "3492ebd8eb7e845e"
            ]
        ]
    },
    {
        "id": "38e4e15fb2438a34",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 5",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 395,
        "y": 1580,
        "wires": [
            [
                "16cb8376d294e0a7"
            ]
        ]
    },
    {
        "id": "16cb8376d294e0a7",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R1\";\n  const targetTower = \"T1\";\n  const targetShelf = \"S1\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1580,
        "wires": [
            [
                "b7f39caa501a435e"
            ]
        ]
    },
    {
        "id": "0bb38016e627ee1d",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "moisture T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1160,
        "y": 1680,
        "wires": []
    },
    {
        "id": "1dad0fa15d0abfe6",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1680,
        "wires": [
            [
                "1f14328dcde7e91b"
            ]
        ]
    },
    {
        "id": "1f14328dcde7e91b",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1680,
        "wires": [
            [
                "0bb38016e627ee1d"
            ]
        ]
    },
    {
        "id": "89919568ff65fdcc",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "1dad0fa15d0abfe6"
            ]
        ]
    },
    {
        "id": "8f3404a755ced694",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1740,
        "wires": [
            [
                "862f7e585676dc32"
            ]
        ]
    },
    {
        "id": "862f7e585676dc32",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1740,
        "wires": [
            [
                "6815c329e0d1dcc5"
            ]
        ]
    },
    {
        "id": "6e64caf467d2a7b1",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1740,
        "wires": [
            [
                "8f3404a755ced694"
            ]
        ]
    },
    {
        "id": "d8e1685ba5c0d47e",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1800,
        "wires": [
            [
                "8b2fa4b29776373d"
            ]
        ]
    },
    {
        "id": "8b2fa4b29776373d",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1800,
        "wires": [
            [
                "b4351da93f0dc8f1"
            ]
        ]
    },
    {
        "id": "617d45c6b59a3f01",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1800,
        "wires": [
            [
                "d8e1685ba5c0d47e"
            ]
        ]
    },
    {
        "id": "37367d03cc4606e4",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1860,
        "wires": [
            [
                "243d682f9e4870c2"
            ]
        ]
    },
    {
        "id": "243d682f9e4870c2",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1860,
        "wires": [
            [
                "c61c0fba3c663cb5"
            ]
        ]
    },
    {
        "id": "56323dc48150351f",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1860,
        "wires": [
            [
                "37367d03cc4606e4"
            ]
        ]
    },
    {
        "id": "7bb9339d75f246c8",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "Height T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 10,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1150,
        "y": 1920,
        "wires": []
    },
    {
        "id": "59a25ee0311d3495",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1920,
        "wires": [
            [
                "118a4f8f3f1bb849"
            ]
        ]
    },
    {
        "id": "118a4f8f3f1bb849",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1920,
        "wires": [
            [
                "7bb9339d75f246c8"
            ]
        ]
    },
    {
        "id": "f6bd61bf823bcc70",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1920,
        "wires": [
            [
                "59a25ee0311d3495"
            ]
        ]
    },
    {
        "id": "b33e3b8920e0c578",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "li T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 11,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1980,
        "wires": []
    },
    {
        "id": "c4129af97dc4a159",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 1980,
        "wires": [
            [
                "6608f6a0a0e3de40"
            ]
        ]
    },
    {
        "id": "6608f6a0a0e3de40",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1980,
        "wires": [
            [
                "b33e3b8920e0c578"
            ]
        ]
    },
    {
        "id": "97fb5b496a7268c0",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S1&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1980,
        "wires": [
            [
                "c4129af97dc4a159"
            ]
        ]
    },
    {
        "id": "6815c329e0d1dcc5",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "N T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 7,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b4351da93f0dc8f1",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "P T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 8,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c61c0fba3c663cb5",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "K T1 S1",
        "group": "0976cfd78f1aded6",
        "order": 9,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 1860,
        "wires": []
    },
    {
        "id": "3046ea5d6648d220",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "0976cfd78f1aded6",
        "order": 12,
        "width": 0,
        "height": 0,
        "name": "Tower1, Shelf S2",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 770,
        "y": 2040,
        "wires": []
    },
    {
        "id": "ad70ea6b45183677",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "pH T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 13,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2080,
        "wires": []
    },
    {
        "id": "dcdd92823ad3c160",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2080,
        "wires": [
            [
                "ab668a7f828176d1"
            ]
        ]
    },
    {
        "id": "ab668a7f828176d1",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2080,
        "wires": [
            [
                "ad70ea6b45183677"
            ]
        ]
    },
    {
        "id": "6ba30acc9708ee48",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2080,
        "wires": [
            [
                "dcdd92823ad3c160"
            ]
        ]
    },
    {
        "id": "183c2ea62ea24cbe",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R1\";\n  const targetTower = \"T1\";\n  const targetShelf = \"S2\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2040,
        "wires": [
            [
                "3046ea5d6648d220"
            ]
        ]
    },
    {
        "id": "2bcbe1fb5beb43b0",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "moisture T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 14,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1160,
        "y": 2140,
        "wires": []
    },
    {
        "id": "066e9ae6a85ed07d",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2140,
        "wires": [
            [
                "56eb5017ce2c58aa"
            ]
        ]
    },
    {
        "id": "56eb5017ce2c58aa",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2140,
        "wires": [
            [
                "2bcbe1fb5beb43b0"
            ]
        ]
    },
    {
        "id": "5719b2c840e9d1d5",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2140,
        "wires": [
            [
                "066e9ae6a85ed07d"
            ]
        ]
    },
    {
        "id": "0e2149b178ea2c4c",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2200,
        "wires": [
            [
                "0b7d38e6cc79df71"
            ]
        ]
    },
    {
        "id": "0b7d38e6cc79df71",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2200,
        "wires": [
            [
                "08911f7bd3cfe506"
            ]
        ]
    },
    {
        "id": "06b6591e511137c5",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2200,
        "wires": [
            [
                "0e2149b178ea2c4c"
            ]
        ]
    },
    {
        "id": "ca8d1fccaf38ba8b",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2260,
        "wires": [
            [
                "80551ad0e1ce508a"
            ]
        ]
    },
    {
        "id": "80551ad0e1ce508a",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2260,
        "wires": [
            [
                "d1f31d78c275df98"
            ]
        ]
    },
    {
        "id": "5d202396944327b2",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2260,
        "wires": [
            [
                "ca8d1fccaf38ba8b"
            ]
        ]
    },
    {
        "id": "392946e660d69f15",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2320,
        "wires": [
            [
                "3e84293ac92a697f"
            ]
        ]
    },
    {
        "id": "3e84293ac92a697f",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2320,
        "wires": [
            [
                "99622f0954752b17"
            ]
        ]
    },
    {
        "id": "1c818f33f2914a28",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2320,
        "wires": [
            [
                "392946e660d69f15"
            ]
        ]
    },
    {
        "id": "468d8e3cb8edd574",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "Height T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 18,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1150,
        "y": 2380,
        "wires": []
    },
    {
        "id": "d3a7cd2bcc5e45a5",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2380,
        "wires": [
            [
                "0d26a40bebe92d44"
            ]
        ]
    },
    {
        "id": "0d26a40bebe92d44",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2380,
        "wires": [
            [
                "468d8e3cb8edd574"
            ]
        ]
    },
    {
        "id": "3b2d8af56f89cfbc",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2380,
        "wires": [
            [
                "d3a7cd2bcc5e45a5"
            ]
        ]
    },
    {
        "id": "49cf7627c03e73c0",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "li T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 19,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2440,
        "wires": []
    },
    {
        "id": "bf01cdd1c142c61a",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2440,
        "wires": [
            [
                "a5065686aaa8b297"
            ]
        ]
    },
    {
        "id": "a5065686aaa8b297",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2440,
        "wires": [
            [
                "49cf7627c03e73c0"
            ]
        ]
    },
    {
        "id": "5257213d4acfac02",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T1&shelf=S2&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2440,
        "wires": [
            [
                "bf01cdd1c142c61a"
            ]
        ]
    },
    {
        "id": "08911f7bd3cfe506",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "N T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 15,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2200,
        "wires": []
    },
    {
        "id": "d1f31d78c275df98",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "P T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 16,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2260,
        "wires": []
    },
    {
        "id": "99622f0954752b17",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "K T1 S2",
        "group": "0976cfd78f1aded6",
        "order": 17,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2320,
        "wires": []
    },
    {
        "id": "bb76c8c60074cfe0",
        "type": "link out",
        "z": "743c2946bb229b64",
        "name": "date-time -1",
        "mode": "link",
        "links": [
            "dd01fb861505605f",
            "f2215e4578258403",
            "11231ae1d74fd68c",
            "b9dbe4e05b3cbb8a",
            "3dedfb5f6eebd7dc",
            "d1ff1c33ae2aeb02",
            "a87899c81bd09b19"
        ],
        "x": 435,
        "y": 1360,
        "wires": []
    },
    {
        "id": "dd01fb861505605f",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 6",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 395,
        "y": 2260,
        "wires": [
            [
                "6ba30acc9708ee48",
                "5719b2c840e9d1d5",
                "5d202396944327b2",
                "1c818f33f2914a28",
                "5257213d4acfac02",
                "06b6591e511137c5",
                "3b2d8af56f89cfbc"
            ]
        ]
    },
    {
        "id": "f2215e4578258403",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 7",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 395,
        "y": 1800,
        "wires": [
            [
                "e6df279bf2382a21",
                "89919568ff65fdcc",
                "6e64caf467d2a7b1",
                "617d45c6b59a3f01",
                "56323dc48150351f",
                "f6bd61bf823bcc70",
                "97fb5b496a7268c0"
            ]
        ]
    },
    {
        "id": "bd80dd4dd4c32521",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 8",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 405,
        "y": 2040,
        "wires": [
            [
                "183c2ea62ea24cbe"
            ]
        ]
    },
    {
        "id": "b4b16beaa777e48b",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "d": true,
        "group": "5b2a8493ef893903",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Tower1, Shelf S1",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 1830,
        "y": 1580,
        "wires": []
    },
    {
        "id": "abd501e2b990ef0a",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "pH T1 S1",
        "group": "5b2a8493ef893903",
        "order": 4,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1620,
        "wires": []
    },
    {
        "id": "40e890fd0fdbb31b",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1620,
        "wires": [
            [
                "7b32561cefab01b0"
            ]
        ]
    },
    {
        "id": "7b32561cefab01b0",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1620,
        "wires": [
            [
                "abd501e2b990ef0a"
            ]
        ]
    },
    {
        "id": "ce36ae6112603745",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1620,
        "wires": [
            [
                "40e890fd0fdbb31b"
            ]
        ]
    },
    {
        "id": "66ae628f7b58b125",
        "type": "link in",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "link in 9",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 1455,
        "y": 1580,
        "wires": [
            [
                "3a5640ea9823abe9"
            ]
        ]
    },
    {
        "id": "3a5640ea9823abe9",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R2\";\n  const targetTower = \"T1\";\n  const targetShelf = \"S1\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1580,
        "wires": [
            [
                "b4b16beaa777e48b"
            ]
        ]
    },
    {
        "id": "7dbb3e4e39380c57",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "moisture T1 S1",
        "group": "5b2a8493ef893903",
        "order": 6,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2220,
        "y": 1680,
        "wires": []
    },
    {
        "id": "667963475c104881",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1680,
        "wires": [
            [
                "9949945ffe758e7d"
            ]
        ]
    },
    {
        "id": "9949945ffe758e7d",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1680,
        "wires": [
            [
                "7dbb3e4e39380c57"
            ]
        ]
    },
    {
        "id": "6fa48394f16827d9",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1680,
        "wires": [
            [
                "667963475c104881"
            ]
        ]
    },
    {
        "id": "72b21f0ef57cb786",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1740,
        "wires": [
            [
                "f15216d2ccf7d2a5"
            ]
        ]
    },
    {
        "id": "f15216d2ccf7d2a5",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1740,
        "wires": [
            [
                "84219170a75e96c5"
            ]
        ]
    },
    {
        "id": "91879da2e2680fa5",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1740,
        "wires": [
            [
                "72b21f0ef57cb786"
            ]
        ]
    },
    {
        "id": "9c465080e58d2f26",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1800,
        "wires": [
            [
                "72494837becd2668"
            ]
        ]
    },
    {
        "id": "72494837becd2668",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1800,
        "wires": [
            [
                "1fdf3e3f4b1a0f02"
            ]
        ]
    },
    {
        "id": "48c80d01afe1fbf5",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1800,
        "wires": [
            [
                "9c465080e58d2f26"
            ]
        ]
    },
    {
        "id": "d89f33cbc94c24a2",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1860,
        "wires": [
            [
                "d14994651387611e"
            ]
        ]
    },
    {
        "id": "d14994651387611e",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1860,
        "wires": [
            [
                "769cc40653cdbbd7"
            ]
        ]
    },
    {
        "id": "96decc78a746713f",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1860,
        "wires": [
            [
                "d89f33cbc94c24a2"
            ]
        ]
    },
    {
        "id": "c1d05deaaab04956",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "Height T1 S1",
        "group": "5b2a8493ef893903",
        "order": 7,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2210,
        "y": 1920,
        "wires": []
    },
    {
        "id": "84cc3188da459abd",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1920,
        "wires": [
            [
                "c956a26b32ab929b"
            ]
        ]
    },
    {
        "id": "c956a26b32ab929b",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1920,
        "wires": [
            [
                "c1d05deaaab04956"
            ]
        ]
    },
    {
        "id": "18313c554d588e71",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1920,
        "wires": [
            [
                "84cc3188da459abd"
            ]
        ]
    },
    {
        "id": "a70a8f7f357518a8",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "li T1 S1",
        "group": "5b2a8493ef893903",
        "order": 9,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1980,
        "wires": []
    },
    {
        "id": "87c30fa5466bbfd3",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 1980,
        "wires": [
            [
                "463d3eb61949d3c5"
            ]
        ]
    },
    {
        "id": "463d3eb61949d3c5",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1980,
        "wires": [
            [
                "a70a8f7f357518a8"
            ]
        ]
    },
    {
        "id": "d3bd0336d2fbcec2",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S1&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1980,
        "wires": [
            [
                "87c30fa5466bbfd3"
            ]
        ]
    },
    {
        "id": "84219170a75e96c5",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "N T1 S1",
        "group": "5b2a8493ef893903",
        "order": 17,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1fdf3e3f4b1a0f02",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "P T1 S1",
        "group": "5b2a8493ef893903",
        "order": 19,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1800,
        "wires": []
    },
    {
        "id": "769cc40653cdbbd7",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "K T1 S1",
        "group": "5b2a8493ef893903",
        "order": 18,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 1860,
        "wires": []
    },
    {
        "id": "ee3e64678a94c6e5",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "d": true,
        "group": "5b2a8493ef893903",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "Tower1, Shelf S2",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 1830,
        "y": 2040,
        "wires": []
    },
    {
        "id": "9b5ea0394a54ee73",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "pH T1 S2",
        "group": "5b2a8493ef893903",
        "order": 16,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 2080,
        "wires": []
    },
    {
        "id": "aab5d04552f39a9c",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2080,
        "wires": [
            [
                "152ef809263c2791"
            ]
        ]
    },
    {
        "id": "152ef809263c2791",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2080,
        "wires": [
            [
                "9b5ea0394a54ee73"
            ]
        ]
    },
    {
        "id": "0d2faa88a021fc6d",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2080,
        "wires": [
            [
                "aab5d04552f39a9c"
            ]
        ]
    },
    {
        "id": "fb5bf0186f086955",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R2\";\n  const targetTower = \"T1\";\n  const targetShelf = \"S2\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2040,
        "wires": [
            [
                "ee3e64678a94c6e5"
            ]
        ]
    },
    {
        "id": "d7336c9dc14cd049",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "moisture T1 S2",
        "group": "5b2a8493ef893903",
        "order": 15,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2220,
        "y": 2140,
        "wires": []
    },
    {
        "id": "250d360a608811ac",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2140,
        "wires": [
            [
                "b7e51d8ace7df2f9"
            ]
        ]
    },
    {
        "id": "b7e51d8ace7df2f9",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2140,
        "wires": [
            [
                "d7336c9dc14cd049"
            ]
        ]
    },
    {
        "id": "69a4d3f93e73f3f4",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2140,
        "wires": [
            [
                "250d360a608811ac"
            ]
        ]
    },
    {
        "id": "289cd1e3ffe1bc95",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2200,
        "wires": [
            [
                "ad1d8e52f8d15eb1"
            ]
        ]
    },
    {
        "id": "ad1d8e52f8d15eb1",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2200,
        "wires": [
            [
                "1da5ab93fc75e774"
            ]
        ]
    },
    {
        "id": "6a40a4b147b29338",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2200,
        "wires": [
            [
                "289cd1e3ffe1bc95"
            ]
        ]
    },
    {
        "id": "2e0456496c8f7847",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2260,
        "wires": [
            [
                "9591edbc4c6321ba"
            ]
        ]
    },
    {
        "id": "9591edbc4c6321ba",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2260,
        "wires": [
            [
                "612c1aaeedf7fe5e"
            ]
        ]
    },
    {
        "id": "cbda6fce7c1ef733",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2260,
        "wires": [
            [
                "2e0456496c8f7847"
            ]
        ]
    },
    {
        "id": "7dcfb5ea43e4518f",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2320,
        "wires": [
            [
                "0d17e4610ea4e767"
            ]
        ]
    },
    {
        "id": "0d17e4610ea4e767",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2320,
        "wires": [
            [
                "a52419cdacad1303"
            ]
        ]
    },
    {
        "id": "59fe40451421472c",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2320,
        "wires": [
            [
                "7dcfb5ea43e4518f"
            ]
        ]
    },
    {
        "id": "0c6587dbe69431d0",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "Height T1 S2",
        "group": "5b2a8493ef893903",
        "order": 11,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2210,
        "y": 2380,
        "wires": []
    },
    {
        "id": "88f091067bcf7226",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2380,
        "wires": [
            [
                "d5325757ee0d9c19"
            ]
        ]
    },
    {
        "id": "d5325757ee0d9c19",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2380,
        "wires": [
            [
                "0c6587dbe69431d0"
            ]
        ]
    },
    {
        "id": "2217a34c03597cf2",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2380,
        "wires": [
            [
                "88f091067bcf7226"
            ]
        ]
    },
    {
        "id": "0991666c049cfecd",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "li T1 S2",
        "group": "5b2a8493ef893903",
        "order": 10,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 2440,
        "wires": []
    },
    {
        "id": "46799e7f42038a85",
        "type": "http request",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1820,
        "y": 2440,
        "wires": [
            [
                "b26d455e51211986"
            ]
        ]
    },
    {
        "id": "b26d455e51211986",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2440,
        "wires": [
            [
                "0991666c049cfecd"
            ]
        ]
    },
    {
        "id": "cc3bb4b6b5bc988e",
        "type": "function",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R2&tower=T1&shelf=S2&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2440,
        "wires": [
            [
                "46799e7f42038a85"
            ]
        ]
    },
    {
        "id": "1da5ab93fc75e774",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "N T1 S2",
        "group": "5b2a8493ef893903",
        "order": 14,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 2200,
        "wires": []
    },
    {
        "id": "612c1aaeedf7fe5e",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "P T1 S2",
        "group": "5b2a8493ef893903",
        "order": 13,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 2260,
        "wires": []
    },
    {
        "id": "a52419cdacad1303",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "K T1 S2",
        "group": "5b2a8493ef893903",
        "order": 12,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2200,
        "y": 2320,
        "wires": []
    },
    {
        "id": "11231ae1d74fd68c",
        "type": "link in",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "link in 10",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 1455,
        "y": 2260,
        "wires": [
            [
                "0d2faa88a021fc6d",
                "69a4d3f93e73f3f4",
                "cbda6fce7c1ef733",
                "59fe40451421472c",
                "cc3bb4b6b5bc988e",
                "6a40a4b147b29338",
                "2217a34c03597cf2"
            ]
        ]
    },
    {
        "id": "b9dbe4e05b3cbb8a",
        "type": "link in",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "link in 11",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 1455,
        "y": 1800,
        "wires": [
            [
                "ce36ae6112603745",
                "6fa48394f16827d9",
                "91879da2e2680fa5",
                "48c80d01afe1fbf5",
                "96decc78a746713f",
                "18313c554d588e71",
                "d3bd0336d2fbcec2"
            ]
        ]
    },
    {
        "id": "db904cc38820dc0d",
        "type": "link in",
        "z": "743c2946bb229b64",
        "d": true,
        "name": "link in 12",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 1465,
        "y": 2040,
        "wires": [
            [
                "fb5bf0186f086955"
            ]
        ]
    },
    {
        "id": "3dedfb5f6eebd7dc",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 13",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 1455,
        "y": 1460,
        "wires": [
            [
                "75c621f0fb474d91",
                "3e8c8feec297beb4",
                "1f79ce18bb82b022"
            ]
        ]
    },
    {
        "id": "99c8fb5538781d0f",
        "type": "debug",
        "z": "743c2946bb229b64",
        "name": "debug url average",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d992cc63d5a49655",
        "type": "debug",
        "z": "743c2946bb229b64",
        "name": "debug, plot url",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 760,
        "wires": []
    },
    {
        "id": "609067793b6fe81a",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "0976cfd78f1aded6",
        "order": 20,
        "width": 0,
        "height": 0,
        "name": "Tower2, Shelf S1",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 770,
        "y": 2520,
        "wires": []
    },
    {
        "id": "2594cc78334038fc",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "pH T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 21,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2560,
        "wires": []
    },
    {
        "id": "0f3d05781b125b11",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2560,
        "wires": [
            [
                "0663e50ea7621a37"
            ]
        ]
    },
    {
        "id": "0663e50ea7621a37",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2560,
        "wires": [
            [
                "2594cc78334038fc"
            ]
        ]
    },
    {
        "id": "3a6edbdad3c7d936",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2560,
        "wires": [
            [
                "0f3d05781b125b11"
            ]
        ]
    },
    {
        "id": "03be6f98336e22e6",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 14",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 395,
        "y": 2520,
        "wires": [
            [
                "b53499930df588a7"
            ]
        ]
    },
    {
        "id": "b53499930df588a7",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R1\";\n  const targetTower = \"T2\";\n  const targetShelf = \"S1\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2520,
        "wires": [
            [
                "609067793b6fe81a"
            ]
        ]
    },
    {
        "id": "44c44de87c9c5301",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "moisture T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 22,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1160,
        "y": 2620,
        "wires": []
    },
    {
        "id": "25c5268ac5c323ac",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2620,
        "wires": [
            [
                "4eb6f642cf37a5af"
            ]
        ]
    },
    {
        "id": "4eb6f642cf37a5af",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2620,
        "wires": [
            [
                "44c44de87c9c5301"
            ]
        ]
    },
    {
        "id": "6094c77acaad5377",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2620,
        "wires": [
            [
                "25c5268ac5c323ac"
            ]
        ]
    },
    {
        "id": "0d8097af3b2e63a7",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2680,
        "wires": [
            [
                "e43d0272b7dc6859"
            ]
        ]
    },
    {
        "id": "e43d0272b7dc6859",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2680,
        "wires": [
            [
                "1198f3a47b5b8c06"
            ]
        ]
    },
    {
        "id": "e619d8cf6758e4d3",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2680,
        "wires": [
            [
                "0d8097af3b2e63a7"
            ]
        ]
    },
    {
        "id": "1032c9918d6b28eb",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2740,
        "wires": [
            [
                "853262951429e386"
            ]
        ]
    },
    {
        "id": "853262951429e386",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2740,
        "wires": [
            [
                "67b36cd91a7df02d"
            ]
        ]
    },
    {
        "id": "722d1fe22cde45fa",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2740,
        "wires": [
            [
                "1032c9918d6b28eb"
            ]
        ]
    },
    {
        "id": "83a3f949b9275347",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2800,
        "wires": [
            [
                "97c4bc7e6e49e966"
            ]
        ]
    },
    {
        "id": "97c4bc7e6e49e966",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2800,
        "wires": [
            [
                "22a60bfa5778d7b0"
            ]
        ]
    },
    {
        "id": "885d2f9df11ccc58",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2800,
        "wires": [
            [
                "83a3f949b9275347"
            ]
        ]
    },
    {
        "id": "2542dcfe9be13088",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "Height T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 26,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1150,
        "y": 2860,
        "wires": []
    },
    {
        "id": "c596883054ed44f7",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2860,
        "wires": [
            [
                "d555f774f08b508a"
            ]
        ]
    },
    {
        "id": "d555f774f08b508a",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2860,
        "wires": [
            [
                "2542dcfe9be13088"
            ]
        ]
    },
    {
        "id": "ac43e37615ced71e",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2860,
        "wires": [
            [
                "c596883054ed44f7"
            ]
        ]
    },
    {
        "id": "22ca73792acd9f32",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "li T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 27,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2920,
        "wires": []
    },
    {
        "id": "26a820f53bc20a77",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 2920,
        "wires": [
            [
                "8ab41e22c7ecee81"
            ]
        ]
    },
    {
        "id": "8ab41e22c7ecee81",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2920,
        "wires": [
            [
                "22ca73792acd9f32"
            ]
        ]
    },
    {
        "id": "8ec9bf14320c842b",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S1&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2920,
        "wires": [
            [
                "26a820f53bc20a77"
            ]
        ]
    },
    {
        "id": "1198f3a47b5b8c06",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "N T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 23,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2680,
        "wires": []
    },
    {
        "id": "67b36cd91a7df02d",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "P T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 24,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2740,
        "wires": []
    },
    {
        "id": "22a60bfa5778d7b0",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "K T2 S1",
        "group": "0976cfd78f1aded6",
        "order": 25,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 2800,
        "wires": []
    },
    {
        "id": "c9a408c20fbe99bd",
        "type": "ui-text",
        "z": "743c2946bb229b64",
        "group": "0976cfd78f1aded6",
        "order": 28,
        "width": 0,
        "height": 0,
        "name": "Tower2, Shelf S2",
        "label": "Tower T1, Shelf S1, plant: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": true,
        "font": "Arial Black,Arial Black,Gadget,sans-serif",
        "fontSize": "16",
        "color": "#717171",
        "className": "",
        "x": 770,
        "y": 2980,
        "wires": []
    },
    {
        "id": "b9c5f15c31a3af22",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "pH T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 29,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Ph",
        "units": "",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ff0000"
            },
            {
                "from": "2",
                "color": "#fc8803"
            },
            {
                "from": "4",
                "color": "#beff0a"
            },
            {
                "from": "6",
                "color": "#66ff00"
            },
            {
                "from": "8",
                "color": "#00ffcc"
            },
            {
                "from": "10",
                "color": "#0008ff"
            },
            {
                "from": "12",
                "color": "#8c00ff"
            }
        ],
        "min": "0",
        "max": "14",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 3020,
        "wires": []
    },
    {
        "id": "8a2df4bb99d3b313",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3020,
        "wires": [
            [
                "f17641863ba3e2a4"
            ]
        ]
    },
    {
        "id": "f17641863ba3e2a4",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3020,
        "wires": [
            [
                "b9c5f15c31a3af22"
            ]
        ]
    },
    {
        "id": "8ded0a09d0573b38",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=ph&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3020,
        "wires": [
            [
                "8a2df4bb99d3b313"
            ]
        ]
    },
    {
        "id": "a7f1a4e5ea106241",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "get plant ID",
        "func": "function extractPlantId(msg) {\n  const plants = msg.payload;\n  const targetRoom = \"R1\";\n  const targetTower = \"T2\";\n  const targetShelf = \"S2\";\n\n  const targetPlant = plants.find(plant => {\n      return plant.room_id === targetRoom && plant.tower_id === targetTower && plant.shelf_id === targetShelf;\n  });\n\n  if (targetPlant) {\n      msg.payload = targetPlant.plant_id;\n  } else {\n      msg.payload = null;\n  }\n  return msg; // Return only the plant_id\n}\n\nreturn extractPlantId(msg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2980,
        "wires": [
            [
                "c9a408c20fbe99bd"
            ]
        ]
    },
    {
        "id": "3bfb73afa1ae089c",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "moisture T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 30,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Soil moisture",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffffff"
            },
            {
                "from": "20",
                "color": "#d6fcff"
            },
            {
                "from": "40",
                "color": "#94f8ff"
            },
            {
                "from": "60",
                "color": "#5cf4ff"
            },
            {
                "from": "80",
                "color": "#00eeff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1160,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9063bd348a14f404",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3080,
        "wires": [
            [
                "346eaaeb6f72bd8a"
            ]
        ]
    },
    {
        "id": "346eaaeb6f72bd8a",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3080,
        "wires": [
            [
                "3bfb73afa1ae089c"
            ]
        ]
    },
    {
        "id": "5b4d20f843b1f2fc",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=moisture&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3080,
        "wires": [
            [
                "9063bd348a14f404"
            ]
        ]
    },
    {
        "id": "4d3d07cce7dbe704",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3140,
        "wires": [
            [
                "8b98e11333719a18"
            ]
        ]
    },
    {
        "id": "8b98e11333719a18",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3140,
        "wires": [
            [
                "6093374eb14500e4"
            ]
        ]
    },
    {
        "id": "d9e4ceaa59f5e16e",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=n&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3140,
        "wires": [
            [
                "4d3d07cce7dbe704"
            ]
        ]
    },
    {
        "id": "4b621e7f94b1e897",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3200,
        "wires": [
            [
                "d3e67765a45fabcd"
            ]
        ]
    },
    {
        "id": "d3e67765a45fabcd",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3200,
        "wires": [
            [
                "51ba80cda7fc0830"
            ]
        ]
    },
    {
        "id": "b385503b4920df81",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=p&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3200,
        "wires": [
            [
                "4b621e7f94b1e897"
            ]
        ]
    },
    {
        "id": "2a4fbfc57982b037",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3260,
        "wires": [
            [
                "75aef0a78673a998"
            ]
        ]
    },
    {
        "id": "75aef0a78673a998",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3260,
        "wires": [
            [
                "48a1728bdb82d713"
            ]
        ]
    },
    {
        "id": "a73ab4f649aad008",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=k&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3260,
        "wires": [
            [
                "2a4fbfc57982b037"
            ]
        ]
    },
    {
        "id": "67cbe72810e93dde",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "Height T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 34,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Height",
        "units": "cm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#21d42d"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1150,
        "y": 3320,
        "wires": []
    },
    {
        "id": "62325082501ed03a",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3320,
        "wires": [
            [
                "e9aa8cfbbe550e14"
            ]
        ]
    },
    {
        "id": "e9aa8cfbbe550e14",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3320,
        "wires": [
            [
                "67cbe72810e93dde"
            ]
        ]
    },
    {
        "id": "fb7d752edbd15017",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=height&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3320,
        "wires": [
            [
                "62325082501ed03a"
            ]
        ]
    },
    {
        "id": "4b848ef2e9604292",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "li T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 35,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Light intensity",
        "units": "lum",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#f4f1d2"
            },
            {
                "from": "50",
                "color": "#e6e4a8"
            },
            {
                "from": "100",
                "color": "#f2e65f"
            },
            {
                "from": "150",
                "color": "#fff71a"
            }
        ],
        "min": "0",
        "max": "200",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 3380,
        "wires": []
    },
    {
        "id": "a7b167244078a8e8",
        "type": "http request",
        "z": "743c2946bb229b64",
        "name": "GET .../average",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{payload}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 760,
        "y": 3380,
        "wires": [
            [
                "28cb7cad37e9402a"
            ]
        ]
    },
    {
        "id": "28cb7cad37e9402a",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "send avg value",
        "func": "const { avg } = msg.payload;\nmsg.payload = avg.toFixed(1);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 3380,
        "wires": [
            [
                "4b848ef2e9604292"
            ]
        ]
    },
    {
        "id": "502509ab720e498a",
        "type": "function",
        "z": "743c2946bb229b64",
        "name": "compose url",
        "func": "// Retrieve the last input message stored in flow variable\nlet url = flow.get('url');\nmsg.payload = `${url}/average?room=R1&tower=T2&shelf=S2&sensor=li&start=${msg.payload}`;\nreturn msg;  // Return the last message to be sent onwards",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 3380,
        "wires": [
            [
                "a7b167244078a8e8"
            ]
        ]
    },
    {
        "id": "6093374eb14500e4",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "N T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 31,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "N",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94ffa9"
            },
            {
                "from": "1",
                "color": "#8ae58b"
            },
            {
                "from": "2",
                "color": "#89cb76"
            },
            {
                "from": "3",
                "color": "#7eb168"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 3140,
        "wires": []
    },
    {
        "id": "51ba80cda7fc0830",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "P T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 32,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "P",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#94d6ff"
            },
            {
                "from": "1",
                "color": "#8ac2e5"
            },
            {
                "from": "2",
                "color": "#76abcb"
            },
            {
                "from": "3",
                "color": "#6895b1"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 3200,
        "wires": []
    },
    {
        "id": "48a1728bdb82d713",
        "type": "ui-gauge",
        "z": "743c2946bb229b64",
        "name": "K T2 S2",
        "group": "0976cfd78f1aded6",
        "order": 33,
        "width": "3",
        "height": "3",
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "K",
        "units": "ppm",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ffd294"
            },
            {
                "from": "1",
                "color": "#e5c48a"
            },
            {
                "from": "2",
                "color": "#cbac76"
            },
            {
                "from": "3",
                "color": "#b19268"
            }
        ],
        "min": "0",
        "max": "4",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1140,
        "y": 3260,
        "wires": []
    },
    {
        "id": "d1ff1c33ae2aeb02",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 15",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 395,
        "y": 3200,
        "wires": [
            [
                "8ded0a09d0573b38",
                "5b4d20f843b1f2fc",
                "b385503b4920df81",
                "a73ab4f649aad008",
                "502509ab720e498a",
                "d9e4ceaa59f5e16e",
                "fb7d752edbd15017"
            ]
        ]
    },
    {
        "id": "a87899c81bd09b19",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 16",
        "links": [
            "bb76c8c60074cfe0"
        ],
        "x": 395,
        "y": 2740,
        "wires": [
            [
                "3a6edbdad3c7d936",
                "6094c77acaad5377",
                "e619d8cf6758e4d3",
                "722d1fe22cde45fa",
                "885d2f9df11ccc58",
                "ac43e37615ced71e",
                "8ec9bf14320c842b"
            ]
        ]
    },
    {
        "id": "042c6dd7170506a2",
        "type": "link in",
        "z": "743c2946bb229b64",
        "name": "link in 17",
        "links": [
            "7b51981890f53e75"
        ],
        "x": 405,
        "y": 2980,
        "wires": [
            [
                "a7f1a4e5ea106241"
            ]
        ]
    },
    {
        "id": "4c6d5dadd19f76dc",
        "type": "debug",
        "z": "743c2946bb229b64",
        "name": "debug, plot url comparrison",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1020,
        "wires": []
    }
]